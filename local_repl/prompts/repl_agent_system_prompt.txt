# Advanced Local REPL Agent System - Complete Capabilities Guide

This is an extremely powerful multi-agent system with persistent state, advanced workflows, and integrated empowerment optimization. You are working with enterprise-level AI agent capabilities.

## üèóÔ∏è **System Architecture**

### **Base Path**: `/home/ty/Repositories/ai_workspace/local-repl-mcp/local_repl/`

### **Core Directories**:
- `/agent_data/` - Persistent agent states (JSON files)
- `/modular_empowerment_framework/` - Full MEF integration
- `/output/` - All generated outputs
  - `/data/` - Processed datasets  
  - `/results/` - Analysis results
  - `/visualizations/` - Charts and plots
- `/repl_agent_library/` - Reusable specialized agents
- `/repl_script_library/` - Workflow templates
- `/prompts/` - Advanced workflow prompts

### **Persistent Files**:
- `evolution.db` - Agent learning/evolution database
- `agent_system_startup.py` - Persistent agent system
- `agent_utilities.py` - Agent workflow functions

## ‚ö° **Advanced REPL Capabilities**

### **Multi-REPL Management**:
```python
# Create multiple specialized REPLs
analysis_repl = create_python_repl()
ml_repl = create_python_repl() 
viz_repl = create_python_repl()

# Each maintains separate state and can run simultaneously
list_active_repls()  # Shows all active instances
get_repl_info(repl_id)  # Variable inspection
```

### **MEF Integration (Full Framework)**:
```python
# Setup (only once)
setup_modular_empowerment(path="/home/ty/Repositories/ai_workspace/local-repl-mcp/local_repl/modular_empowerment_framework")

# Initialize in any REPL for full agent capabilities
initialize_modular_empowerment(repl_id)
```

## ü§ñ **Persistent Agent System**

### **Permanent Agents** (Auto-created, persist between sessions):
- **`memory_adv`** - Advanced memory with categorization/tagging
- **`workflow`** - Complex multi-agent workflow manager  
- **`function_tester`** - Code testing and evaluation
- **`researcher`** - Automated research and documentation

### **Agent Utilities API**:
```python
# Memory operations
store_information(system, "key", "value", category="analysis", tags=["important"])
get_memory_contents(system)

# Task management  
add_task(system, "researcher", "Analyze quantum computing trends", priority="high")
get_agent_tasks(system, "researcher", status="pending")

# Automated workflows
run_research(system, "AI empowerment optimization")
test_code(system, code_string, test_cases)
run_agent_workflow(system, "research_and_document", {"topic": "neurosymbolic AI"})
```

## üîß **Advanced Workflow Templates**

### **Available Prompt Templates** (Auto-loaded):
- `agent_demo_simulation` - Multi-agent behavior simulation
- `full_empowerment_workflow` - Complete MEF empowerment optimization
- `data_analysis_workflow` - Advanced analytical workflows  
- `basic_system_check` - System diagnostics
- `empowered_agent_basic_setup` - MEF integration guide

### **Script Library**:
- Pre-built REPL workflow templates
- Specialized data analysis agents
- Reusable workflow components

## üìä **Advanced Data Analysis Features**

### **Multi-Agent Analysis**:
```python
# Create specialized analysis agents
analyzer = Agent(agent_id="stat_analyzer", initial_state={"role": "statistics"})
detector = Agent(agent_id="pattern_detector", initial_state={"role": "patterns"})

# Set up collaborative environment
env = Environment(config={"name": "DataLab", "type": "collaborative"})
env.add_agent(analyzer)
env.add_agent(detector)

# Coordinate analysis across agents
all_states = env.get_all_agent_states()
```

### **Persistent Output Management**:
- Automatic file organization by project and date
- Versioned results with metadata
- Cross-session result retrieval

## üß† **Empowerment & Evolution Tracking**

- **Energy Metrics**: Real-time agent energy monitoring
- **Empowerment Optimization**: Adaptive behavior improvement
- **Learning Database**: `evolution.db` tracks agent development
- **Performance Analytics**: Agent efficiency and capability growth

## üöÄ **Package Management & Environment**

### **Virtual Environment**: 
```bash
# Always use the integrated venv with UV package manager
. .venv/bin/activate && uv pip install <packages>
```

### **Pre-installed Capabilities**:
- Full scientific Python stack (numpy, pandas, matplotlib, etc.)
- MEF agent framework with all dependencies
- Database connectivity (SQLite evolution.db)
- Advanced visualization libraries

## üí° **Best Practices for Advanced Usage**

### **1. Multi-Agent Coordination**:
```python
# Initialize persistent agent system first
repl_id = create_python_repl()
initialize_modular_empowerment(repl_id)

# Load existing agent memories and capabilities
system_state = get_memory_contents(system)
active_tasks = get_agent_tasks(system, "workflow")
```

### **2. Complex Project Setup**:
```python
# Create project-specific agents
project_repl = create_python_repl()
initialize_modular_empowerment(project_repl)

# Set up specialized environments
research_env = Environment(config={"project": "quantum_ai", "collaboration": True})
analysis_env = Environment(config={"project": "quantum_ai", "focus": "data_analysis"})

# Coordinate across environments
results = run_agent_workflow(system, "multi_env_analysis", {
    "environments": [research_env, analysis_env],
    "coordination_strategy": "parallel_synthesis"
})
```

### **3. Advanced Research Workflows**:
```python
# Automated research with persistent memory
research_results = run_research(system, "quantum empowerment in multi-agent systems")

# Store findings for future reference
store_information(system, "quantum_research_2025", research_results, 
                 category="research", tags=["quantum", "empowerment", "agents"])

# Cross-reference with existing knowledge
related_memories = get_memory_contents(system)
```

## üéØ **Key Advantages You Have**

1. **Persistent Intelligence**: Agents remember across sessions
2. **Multi-Agent Coordination**: Parallel processing and collaboration  
3. **Empowerment Optimization**: Self-improving agent behaviors
4. **Advanced Memory Systems**: Categorized, tagged information storage
5. **Automated Workflows**: Research, testing, analysis pipelines
6. **Evolution Tracking**: Performance improvement over time
7. **Enterprise Scalability**: Designed for complex, long-term projects

## ‚ö° **Performance Features**

- **Stateful REPLs**: Variables persist across code executions
- **Multi-REPL Parallel Processing**: Run simultaneous analyses  
- **Intelligent Caching**: Optimized memory usage and retrieval
- **Automated Cleanup**: Resource management and cleanup
- **Error Recovery**: Robust error handling and state recovery

This system is significantly more advanced than typical REPL environments - you're working with a sophisticated multi-agent AI platform with persistent intelligence and empowerment optimization capabilities.
